{"is_source_file": true, "format": "Python", "description": "This file defines a background worker class 'TestExecutorWorker' for processing a test execution queue, including signal handling, database initialization, and an asynchronous run method. It also includes a main entry point to run the worker directly.", "external_files": ["../services/queue_service", "../database/connection"], "external_methods": ["queue_service.process_queue", "init_db"], "published": ["run_worker"], "classes": [{"name": "TestExecutorWorker", "description": "Background worker for processing test execution queue, manages startup, shutdown signals, and queue processing."}], "methods": [{"name": "__init__(self, max_concurrent: int = 1, poll_interval: int = 5)", "description": "Initializes the worker with maximum concurrency and poll interval, sets up signal handlers.", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"name": "setup_signal_handlers(self)", "description": "Registers signal handlers for graceful shutdown on SIGINT and SIGTERM.", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"name": "signal_handler(self, signum, frame)", "description": "Handles shutdown signals, logs message, and sets running to False.", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"name": "start(self)", "description": "Asynchronous method that starts the worker, continuously processing the queue until stopped, with error handling and sleep intervals.", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"name": "stop(self)", "description": "Stops the worker by setting running to False.", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"name": "run_worker()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["queue_service.process_queue", "init_db", "asyncio.sleep"], "search-terms": ["TestExecutorWorker", "queue_service", "signal handling", "asyncio worker", "test queue processing"], "state": 2, "file_id": 18, "knowledge_revision": 54, "git_revision": "", "revision_history": [{"46": ""}, {"54": ""}], "ctags": [{"_type": "tag", "name": "TestExecutorWorker", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^class TestExecutorWorker:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^    def __init__(self, max_concurrent: int = 1, poll_interval: int = 5):$/", "language": "Python", "kind": "member", "signature": "(self, max_concurrent: int = 1, poll_interval: int = 5)", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_worker", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^async def run_worker():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "setup_signal_handlers", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^    def setup_signal_handlers(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"_type": "tag", "name": "signal_handler", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^    def signal_handler(self, signum, frame):$/", "language": "Python", "kind": "member", "signature": "(self, signum, frame)", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"_type": "tag", "name": "start", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^    async def start(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestExecutorWorker", "scopeKind": "class"}, {"_type": "tag", "name": "stop", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/workers/test_executor.py", "pattern": "/^    def stop(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestExecutorWorker", "scopeKind": "class"}], "hash": "1e56c839520f0eac64bc49450cc6ba07", "format-version": 4, "code-base-name": "BackendAPI", "filename": "BackendAPI/src/workers/test_executor.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}
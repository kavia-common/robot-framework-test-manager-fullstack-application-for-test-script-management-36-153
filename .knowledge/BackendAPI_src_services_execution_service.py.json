{"is_source_file": true, "format": "Python", "description": "This file defines an ExecutionService class that manages the execution of Robot Framework test cases, including running tests, handling results, and uploading logs. It interacts with database models, external storage (MinIO), and executes subprocess commands to run tests asynchronously.", "external_files": ["../database/models", "../database/connection", "./minio_service"], "external_methods": ["get_db_context", "minio_service.upload_file"], "published": ["execution_service"], "classes": [{"name": "ExecutionService", "description": "A service class responsible for executing Robot Framework test cases, managing their lifecycle, and processing results."}], "methods": [{"name": "str execute_test_case(self, case_id: str, user_id: str, config: Dict[str, Any] = None)", "description": "Initiates execution of a single test case by its ID and tracks the run.", "scope": "ExecutionService", "scopeKind": "class"}, {"name": "List[str] execute_multiple_test_cases(self, case_ids: List[str], user_id: str, config: Dict[str, Any] = None)", "description": "Executes multiple test cases concurrently and returns their run IDs.", "scope": "ExecutionService", "scopeKind": "class"}, {"name": "Dict[str,Any] _run_robot_test(self, test_script: TestScript, test_case: TestCase, run_id: str, config: Dict[str, Any] = None)", "description": "Runs a Robot Framework test script in a subprocess, captures output, and uploads logs.", "scope": "ExecutionService", "scopeKind": "class"}, {"name": "_update_run_result(self, run_id: str, result: Dict[str, Any])", "description": "Updates the database record for a test run with the execution outcome and logs.", "scope": "ExecutionService", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "ExecutionService", "scopeKind": "class", "description": "unavailable"}], "calls": ["get_db_context", "subprocess.run", "minio_service.upload_file", "os.path.join", "os.makedirs", "os.path.exists", "os.remove", "shutil.rmtree", "datetime.utcnow"], "search-terms": ["ExecutionService", "Robot Framework test execution", "test case execution", "log uploading", "database test run", "async test runner"], "state": 2, "file_id": 10, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "ExecutionService", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^class ExecutionService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "ExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "_run_robot_test", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^    async def _run_robot_test(self, test_script: TestScript, test_case: TestCase, run_id: str, c/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, test_script: TestScript, test_case: TestCase, run_id: str, config: Dict[str, Any] = None)", "scope": "ExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "_update_run_result", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^    async def _update_run_result(self, run_id: str, result: Dict[str, Any]):$/", "language": "Python", "kind": "member", "signature": "(self, run_id: str, result: Dict[str, Any])", "scope": "ExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "execute_multiple_test_cases", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^    async def execute_multiple_test_cases(self, case_ids: List[str], user_id: str, config: Dict[/", "language": "Python", "typeref": "typename:List[str]", "kind": "member", "signature": "(self, case_ids: List[str], user_id: str, config: Dict[str, Any] = None)", "scope": "ExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "execute_test_case", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^    async def execute_test_case(self, case_id: str, user_id: str, config: Dict[str, Any] = None)/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, case_id: str, user_id: str, config: Dict[str, Any] = None)", "scope": "ExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "execution_service", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^execution_service = ExecutionService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/execution_service.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}], "hash": "2b96c86f2f36b8456d9bb8965f7a8cc4", "format-version": 4, "code-base-name": "BackendAPI", "filename": "BackendAPI/src/services/execution_service.py", "fields": [{"name": "execution_service = ExecutionService()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21": ""}]}
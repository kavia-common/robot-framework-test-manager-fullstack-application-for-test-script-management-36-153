{"is_source_file": true, "format": "Python", "description": "This file provides security utilities for authentication and authorization in a FastAPI-based application. It includes functions for password hashing and verification, JWT token creation and decoding, user authentication, and role-based access control.", "external_files": ["src.core.config.settings"], "external_methods": ["jwt.encode", "jwt.decode", "settings.JWT_ACCESS_TOKEN_EXPIRE_MINUTES", "settings.JWT_SECRET_KEY", "settings.JWT_ALGORITHM"], "published": ["verify_password", "get_password_hash", "create_access_token", "decode_access_token", "get_current_user", "require_role"], "classes": [], "methods": [{"name": "bool verify_password(plain_password: str, hashed_password: str)", "description": "Verifies a plain text password against a hashed password using bcrypt.", "scope": "", "scopeKind": ""}, {"name": "str get_password_hash(password: str)", "description": "Hashes a plain text password using bcrypt.", "scope": "", "scopeKind": ""}, {"name": "str create_access_token(data: dict, expires_delta: Optional[timedelta] = None)", "description": "Creates a JWT access token with optional expiration.", "scope": "", "scopeKind": ""}, {"name": "dict decode_access_token(token: str)", "description": "Decodes and validates a JWT token, raising an HTTPException if invalid.", "scope": "", "scopeKind": ""}, {"name": "dict get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security))", "description": "Extracts and returns the current user payload from the JWT token, raising an exception if invalid.", "scope": "", "scopeKind": ""}, {"name": "require_role(required_roles: list[str])", "description": "Returns a dependency function that checks if the current user has at least one of the required roles.", "scope": "", "scopeKind": ""}, {"name": "dict role_checker(current_user: dict = Depends(get_current_user))", "scope": "require_role", "scopeKind": "function", "description": "unavailable"}], "calls": ["jwt.encode", "jwt.decode", "verify_password", "hash", "Depends", "HTTPException", "status.HTTP_401_UNAUTHORIZED", "status.HTTP_403_FORBIDDEN", "datetime.utcnow", "timedelta"], "search-terms": ["JWT token creation", "password hashing", "FastAPI security", "role-based access API", "JWT decoding"], "state": 2, "file_id": 6, "knowledge_revision": 13, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(data: dict, expires_delta: Optional[timedelta] = None)"}, {"_type": "tag", "name": "decode_access_token", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^def decode_access_token(token: str) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(token: str)"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> dic/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(credentials: HTTPAuthorizationCredentials = Depends(security))"}, {"_type": "tag", "name": "get_password_hash", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^def get_password_hash(password: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(password: str)"}, {"_type": "tag", "name": "pwd_context", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "require_role", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^def require_role(required_roles: list[str]):$/", "language": "Python", "kind": "function", "signature": "(required_roles: list[str])"}, {"_type": "tag", "name": "role_checker", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^    async def role_checker(current_user: dict = Depends(get_current_user)) -> dict:$/", "file": true, "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(current_user: dict = Depends(get_current_user))", "scope": "require_role", "scopeKind": "function"}, {"_type": "tag", "name": "security", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^security = HTTPBearer()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/core/security.py", "pattern": "/^def verify_password(plain_password: str, hashed_password: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(plain_password: str, hashed_password: str)"}], "hash": "7960754729115902c0e83fb6ae273f79", "format-version": 4, "code-base-name": "BackendAPI", "filename": "BackendAPI/src/core/security.py", "fields": [{"name": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "security = HTTPBearer()", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"13": ""}]}
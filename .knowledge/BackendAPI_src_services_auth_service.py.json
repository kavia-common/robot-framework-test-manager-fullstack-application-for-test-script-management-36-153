{"is_source_file": true, "format": "Python", "description": "This file implements an authentication service class (`AuthService`) which provides methods for user authentication, creation, login, user info retrieval, and default role initialization, using SQLAlchemy ORM models and security utilities.", "external_files": ["src/database/models.py", "src/schemas/user_schemas.py", "src/core/security.py", "src/core/config.py"], "external_methods": ["verify_password", "get_password_hash", "create_access_token"], "published": ["auth_service"], "classes": [{"name": "AuthService", "description": "Service class providing authentication and user management functionalities such as login, user creation, and role initialization."}], "methods": [{"name": "Optional[User] authenticate_user(self, db: Session, username: str, password: str)", "description": "Authenticate a user by username and password, returning the User object if successful.", "scope": "AuthService", "scopeKind": "class"}, {"name": "User create_user(self, db: Session, user_data: UserCreate, roles: List[str] = None)", "description": "Create a new user with optional roles and return the User object.", "scope": "AuthService", "scopeKind": "class"}, {"name": "TokenResponse login(self, db: Session, login_data: LoginRequest)", "description": "Authenticate the user and generate a JWT token.", "scope": "AuthService", "scopeKind": "class"}, {"name": "UserResponse get_user_info(self, db: Session, user_id: str)", "description": "Retrieve user information and roles by user ID.", "scope": "AuthService", "scopeKind": "class"}, {"name": "init_default_roles(self, db: Session)", "description": "Initialize default roles in the database if they do not already exist.", "scope": "AuthService", "scopeKind": "class"}], "calls": ["db.query(User).filter(User.username == username).first()", "verify_password(password, user.hashed_password)", "get_password_hash(user_data.password)", "db.add(db_user)", "db.flush()", "db.query(Role).filter(Role.name == role_name).first()", "db.add(user_role)", "db.commit()", "db.refresh(db_user)", "create_access_token(...)", "db.query(User).filter(User.id == user_id).first()", "db.query(Role).filter(Role.name == role_name).first()"], "search-terms": ["AuthService", "authentication", "JWT", "user management", "role initialization", "create_user", "get_user_info"], "state": 2, "file_id": 14, "knowledge_revision": 29, "git_revision": "", "ctags": [{"_type": "tag", "name": "AuthService", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^class AuthService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "auth_service", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^auth_service = AuthService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "authenticate_user", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^    def authenticate_user(self, db: Session, username: str, password: str) -> Optional[User]:$/", "language": "Python", "typeref": "typename:Optional[User]", "kind": "member", "signature": "(self, db: Session, username: str, password: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "create_user", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^    def create_user(self, db: Session, user_data: UserCreate, roles: List[str] = None) -> User:$/", "language": "Python", "typeref": "typename:User", "kind": "member", "signature": "(self, db: Session, user_data: UserCreate, roles: List[str] = None)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "get_user_info", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^    def get_user_info(self, db: Session, user_id: str) -> UserResponse:$/", "language": "Python", "typeref": "typename:UserResponse", "kind": "member", "signature": "(self, db: Session, user_id: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "init_default_roles", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^    def init_default_roles(self, db: Session):$/", "language": "Python", "kind": "member", "signature": "(self, db: Session)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/services/auth_service.py", "pattern": "/^    def login(self, db: Session, login_data: LoginRequest) -> TokenResponse:$/", "language": "Python", "typeref": "typename:TokenResponse", "kind": "member", "signature": "(self, db: Session, login_data: LoginRequest)", "scope": "AuthService", "scopeKind": "class"}], "hash": "b51374bf6d9771c2c6d8119ba9f5e07b", "format-version": 4, "code-base-name": "BackendAPI", "filename": "BackendAPI/src/services/auth_service.py", "fields": [{"name": "auth_service = AuthService()", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"29": ""}]}
{"is_source_file": true, "format": "Python", "description": "This file defines API routes for managing test cases in a test management system, including CRUD operations, listing, and retrieval of test case details.", "external_files": ["src/database", "src.schemas.test_schemas", "src.services.test_service", "src.core.security"], "external_methods": ["get_db", "TestCaseCreate", "TestCaseUpdate", "TestCaseResponse", "StandardResponse", "PaginationResponse", "test_service.create_test_case", "test_service.list_test_cases", "test_service.get_test_case", "test_service.update_test_case", "test_service.delete_test_case", "get_current_user"], "published": ["router", "create_case", "list_cases", "get_case", "update_case", "delete_case"], "classes": [], "methods": [{"name": "create_case( case_data: TestCaseCreate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )", "description": "Endpoint to create a new test case using provided data and user context.", "scope": "", "scopeKind": ""}, {"name": "list_cases( test_script_id: Optional[str] = Query(None), name: Optional[str] = Query(None), page: int = Query(1, ge=1), page_size: int = Query(20, ge=1, le=100), db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )", "description": "Endpoint to list all test cases with optional filtering and pagination.", "scope": "", "scopeKind": ""}, {"name": "get_case( case_id: str, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )", "description": "Endpoint to retrieve details of a specific test case by its ID.", "scope": "", "scopeKind": ""}, {"name": "update_case( case_id: str, case_data: TestCaseUpdate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )", "description": "Endpoint to update an existing test case identified by its ID.", "scope": "", "scopeKind": ""}, {"name": "delete_case( case_id: str, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )", "description": "Endpoint to delete a specific test case, including related queue items and history.", "scope": "", "scopeKind": ""}], "calls": ["test_service.create_test_case", "test_service.list_test_cases", "test_service.get_test_case", "test_service.update_test_case", "test_service.delete_test_case", "get_db", "get_current_user"], "search-terms": ["test cases router", "test case CRUD", "API endpoints for test cases", "FastAPI test case operations", "case_id parameter"], "state": 2, "file_id": 19, "knowledge_revision": 39, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_case", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/api/routers/cases.py", "pattern": "/^async def create_case($/", "language": "Python", "kind": "function", "signature": "( case_data: TestCaseCreate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )"}, {"_type": "tag", "name": "delete_case", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/api/routers/cases.py", "pattern": "/^async def delete_case($/", "language": "Python", "kind": "function", "signature": "( case_id: str, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_case", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/api/routers/cases.py", "pattern": "/^async def get_case($/", "language": "Python", "kind": "function", "signature": "( case_id: str, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )"}, {"_type": "tag", "name": "list_cases", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/api/routers/cases.py", "pattern": "/^async def list_cases($/", "language": "Python", "kind": "function", "signature": "( test_script_id: Optional[str] = Query(None), name: Optional[str] = Query(None), page: int = Query(1, ge=1), page_size: int = Query(20, ge=1, le=100), db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/api/routers/cases.py", "pattern": "/^router = APIRouter(prefix=\"\\/cases\", tags=[\"Test Cases\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_case", "path": "/home/kavia/workspace/code-generation/robot-framework-test-manager-fullstack-application-for-test-script-management-36-153/BackendAPI/src/api/routers/cases.py", "pattern": "/^async def update_case($/", "language": "Python", "kind": "function", "signature": "( case_id: str, case_data: TestCaseUpdate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user) )"}], "hash": "d673951758215a1d47a62c8ea6c24c9d", "format-version": 4, "code-base-name": "BackendAPI", "filename": "BackendAPI/src/api/routers/cases.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/cases\", tags=[\"Test Cases\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"39": ""}]}
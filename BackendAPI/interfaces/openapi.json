{
  "openapi": "3.1.0",
  "info": {
    "title": "Robot Framework Test Manager API",
    "description": "RESTful API for managing Robot Framework test scripts, test cases, execution, queue, run history, and logs. Secured with JWT authentication and role-based access control.",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate user and issue token",
        "description": "Authenticate user and issue JWT token.\n\n- **username**: Username for authentication\n- **password**: User password\n\nReturns JWT access token and token type.",
        "operationId": "login_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Retrieve current user info and roles",
        "description": "Get current authenticated user information and roles.\n\nRequires valid JWT token in Authorization header.\nReturns user ID, username, email, and assigned roles.",
        "operationId": "get_me_api_v1_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Invalidate session/token",
        "description": "Logout and invalidate session/token.\n\nIn a stateless JWT implementation, the client should discard the token.\nFuture enhancement: Token blacklisting could be implemented here.",
        "operationId": "logout_api_v1_auth_logout_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/tests": {
      "post": {
        "tags": [
          "Test Scripts"
        ],
        "summary": "Create a new test script",
        "description": "Create a new test script.\n\n- **name**: Name of the test script (required)\n- **description**: Optional description\n- **metadata**: Optional metadata as JSON object\n\nReturns the created test script with ID and timestamps.",
        "operationId": "create_test_api_v1_tests_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestScriptCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Test Scripts"
        ],
        "summary": "List all test scripts",
        "description": "List all test scripts with pagination.\n\n- **page**: Page number (default: 1)\n- **page_size**: Items per page (default: 20, max: 100)\n\nReturns paginated list of test scripts.",
        "operationId": "list_tests_api_v1_tests_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tests/{test_id}": {
      "get": {
        "tags": [
          "Test Scripts"
        ],
        "summary": "Retrieve details of a specific test script",
        "description": "Get a specific test script by ID.\n\n- **test_id**: UUID of the test script\n\nReturns test script details including metadata and timestamps.",
        "operationId": "get_test_api_v1_tests__test_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestScriptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Test Scripts"
        ],
        "summary": "Update a test script",
        "description": "Update an existing test script.\n\n- **test_id**: UUID of the test script\n- **name**: Optional new name\n- **description**: Optional new description\n- **metadata**: Optional new metadata\n\nReturns the updated test script.",
        "operationId": "update_test_api_v1_tests__test_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestScriptUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Test Scripts"
        ],
        "summary": "Delete a test script",
        "description": "Delete a test script.\n\n- **test_id**: UUID of the test script\n\nDeletes the test script and all associated test cases.\nReturns 204 No Content on success.",
        "operationId": "delete_test_api_v1_tests__test_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases": {
      "post": {
        "tags": [
          "Test Cases"
        ],
        "summary": "Create a new test case",
        "description": "Create a new test case.\n\n- **test_script_id**: UUID of parent test script (required)\n- **name**: Name of the test case (required)\n- **description**: Optional description\n- **variables**: Optional variables as JSON object\n\nReturns the created test case with ID and timestamps.",
        "operationId": "create_case_api_v1_cases_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Test Cases"
        ],
        "summary": "List all test cases (with filtering)",
        "description": "List all test cases with optional filtering and pagination.\n\n- **test_script_id**: Optional filter by test script UUID\n- **name**: Optional filter by case name (partial match)\n- **page**: Page number (default: 1)\n- **page_size**: Items per page (default: 20, max: 100)\n\nReturns paginated list of test cases.",
        "operationId": "list_cases_api_v1_cases_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "test_script_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Test Script Id"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cases/{case_id}": {
      "get": {
        "tags": [
          "Test Cases"
        ],
        "summary": "Retrieve details of a specific test case",
        "description": "Get a specific test case by ID.\n\n- **case_id**: UUID of the test case\n\nReturns test case details including variables and timestamps.",
        "operationId": "get_case_api_v1_cases__case_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Test Cases"
        ],
        "summary": "Update a test case",
        "description": "Update an existing test case.\n\n- **case_id**: UUID of the test case\n- **test_script_id**: Optional new parent test script UUID\n- **name**: Optional new name\n- **description**: Optional new description\n- **variables**: Optional new variables\n\nReturns the updated test case.",
        "operationId": "update_case_api_v1_cases__case_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Test Cases"
        ],
        "summary": "Delete a test case",
        "description": "Delete a test case.\n\n- **case_id**: UUID of the test case\n\nDeletes the test case and all associated queue items and run history.\nReturns 204 No Content on success.",
        "operationId": "delete_case_api_v1_cases__case_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Case Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/execute": {
      "post": {
        "tags": [
          "Execution"
        ],
        "summary": "Execute one or more test cases (ad hoc or queued)",
        "description": "Trigger execution of one or more test cases.\n\n- **case_ids**: List of test case UUIDs to execute\n- **run_type**: Type of execution ('ad_hoc' for immediate, 'queued' for queue)\n\nFor ad_hoc runs, execution starts immediately (background).\nFor queued runs, test cases are added to the execution queue.\n\nReturns 202 Accepted with run IDs.",
        "operationId": "execute_tests_api_v1_execute_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/queue": {
      "get": {
        "tags": [
          "Queue"
        ],
        "summary": "List currently queued test cases",
        "description": "Retrieve the current execution queue.\n\nReturns a list of queued test cases ordered by priority and queue time.\nEach item includes case ID, status, priority, and queued timestamp.",
        "operationId": "get_queue_api_v1_queue_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QueueItemResponse"
                  },
                  "type": "array",
                  "title": "Response Get Queue Api V1 Queue Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Queue"
        ],
        "summary": "Add test case(s) to queue",
        "description": "Add one or more test cases to the execution queue.\n\n- **case_ids**: List of test case UUIDs to add to queue\n\nReturns list of created queue items.\nSkips test cases that are already in the queue.",
        "operationId": "add_to_queue_api_v1_queue_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/queue/{case_id}": {
      "delete": {
        "tags": [
          "Queue"
        ],
        "summary": "Remove a test case from queue",
        "description": "Remove a test case from the execution queue.\n\n- **case_id**: UUID of the test case to remove\n\nReturns 204 No Content on success.\nOnly removes pending queue items.",
        "operationId": "remove_from_queue_api_v1_queue__case_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Case Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/history": {
      "get": {
        "tags": [
          "Run History"
        ],
        "summary": "List run history (with filtering and pagination)",
        "description": "List run history with optional filtering and pagination.\n\n- **case_id**: Optional filter by test case UUID\n- **status**: Optional filter by execution status (pending, running, passed, failed, error)\n- **page**: Page number (default: 1)\n- **page_size**: Items per page (default: 20, max: 100)\n\nReturns paginated list of run history entries with log URLs where available.",
        "operationId": "get_history_api_v1_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "case_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Case Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/history/{run_id}": {
      "get": {
        "tags": [
          "Run History"
        ],
        "summary": "Retrieve details and logs for a specific run",
        "description": "Get detailed information for a specific test run.\n\n- **run_id**: UUID of the run history entry\n\nReturns run details including case ID, status, timestamps, and log URL.",
        "operationId": "get_run_details_api_v1_history__run_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/logs/{run_id}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Download or preview execution logs",
        "description": "Get execution logs for a specific run.\n\n- **run_id**: UUID of the run history entry\n\nReturns a presigned URL to download/view the log file from MinIO.\nThe URL is valid for 1 hour.",
        "operationId": "get_logs_api_v1_logs__run_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint.\nReturns service status and version information.",
        "operationId": "health_check__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Api Health Check",
        "description": "API health check endpoint.\nReturns API status for monitoring.",
        "operationId": "api_health_check_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ExecuteRequest": {
        "properties": {
          "case_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Case Ids"
          },
          "run_type": {
            "type": "string",
            "pattern": "^(ad_hoc|queued)$",
            "title": "Run Type"
          }
        },
        "type": "object",
        "required": [
          "case_ids",
          "run_type"
        ],
        "title": "ExecuteRequest",
        "description": "Schema for execution request"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LogResponse": {
        "properties": {
          "log_url": {
            "type": "string",
            "title": "Log Url"
          }
        },
        "type": "object",
        "required": [
          "log_url"
        ],
        "title": "LogResponse",
        "description": "Schema for log response"
      },
      "LoginRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "LoginRequest",
        "description": "Schema for login request"
      },
      "PaginationResponse": {
        "properties": {
          "items": {
            "items": {},
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "page_size"
        ],
        "title": "PaginationResponse",
        "description": "Schema for paginated responses"
      },
      "QueueAddRequest": {
        "properties": {
          "case_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Case Ids"
          }
        },
        "type": "object",
        "required": [
          "case_ids"
        ],
        "title": "QueueAddRequest",
        "description": "Schema for adding items to queue"
      },
      "QueueItemResponse": {
        "properties": {
          "case_id": {
            "type": "string",
            "title": "Case Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "queued_at": {
            "type": "string",
            "format": "date-time",
            "title": "Queued At"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "case_id",
          "status",
          "queued_at"
        ],
        "title": "QueueItemResponse",
        "description": "Schema for queue item response"
      },
      "RunHistoryResponse": {
        "properties": {
          "run_id": {
            "type": "string",
            "title": "Run Id"
          },
          "case_id": {
            "type": "string",
            "title": "Case Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "finished_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finished At"
          },
          "log_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Log Url"
          }
        },
        "type": "object",
        "required": [
          "run_id",
          "case_id",
          "status"
        ],
        "title": "RunHistoryResponse",
        "description": "Schema for run history response"
      },
      "StandardResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "data": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "StandardResponse",
        "description": "Standard API response schema"
      },
      "TestCaseCreate": {
        "properties": {
          "test_script_id": {
            "type": "string",
            "title": "Test Script Id"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "variables": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variables",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "test_script_id",
          "name"
        ],
        "title": "TestCaseCreate",
        "description": "Schema for creating a test case"
      },
      "TestCaseResponse": {
        "properties": {
          "test_script_id": {
            "type": "string",
            "title": "Test Script Id"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "variables": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variables",
            "default": {}
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "test_script_id",
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "TestCaseResponse",
        "description": "Schema for test case response"
      },
      "TestCaseUpdate": {
        "properties": {
          "test_script_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Test Script Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "variables": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variables"
          }
        },
        "type": "object",
        "title": "TestCaseUpdate",
        "description": "Schema for updating a test case"
      },
      "TestScriptCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TestScriptCreate",
        "description": "Schema for creating a test script"
      },
      "TestScriptResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Data",
            "default": {}
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "TestScriptResponse",
        "description": "Schema for test script response"
      },
      "TestScriptUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Data"
          }
        },
        "type": "object",
        "title": "TestScriptUpdate",
        "description": "Schema for updating a test script"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": [
          "access_token"
        ],
        "title": "TokenResponse",
        "description": "Schema for token response"
      },
      "UserResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Roles"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "username",
          "email",
          "full_name",
          "roles"
        ],
        "title": "UserResponse",
        "description": "Schema for user response"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and session management"
    },
    {
      "name": "Test Scripts",
      "description": "Manage Robot Framework test scripts"
    },
    {
      "name": "Test Cases",
      "description": "Manage test cases within test scripts"
    },
    {
      "name": "Execution",
      "description": "Execute test cases and manage execution"
    },
    {
      "name": "Queue",
      "description": "Manage test execution queue"
    },
    {
      "name": "Run History",
      "description": "View and manage test run history"
    },
    {
      "name": "Logs",
      "description": "Access execution logs"
    }
  ]
}